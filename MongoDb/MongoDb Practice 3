/**
 * E-commerce Catalog with Nested Document Structure in MongoDB
 * -------------------------------------------------------------
 * Demonstrates: Schema design, insertion, and queries using nested documents
 */

const mongoose = require("mongoose");

// üîó Connect to MongoDB
mongoose.connect("mongodb://127.0.0.1:27017/ecommerceDB")
  .then(() => console.log("‚úÖ MongoDB Connected"))
  .catch(err => console.error("‚ùå Connection error:", err));

// üß± Define the Variant subdocument schema
const variantSchema = new mongoose.Schema({
  color: String,
  size: String,
  stock: Number
}, { _id: false });

// üè∑Ô∏è Define the Product schema
const productSchema = new mongoose.Schema({
  name: { type: String, required: true },
  price: Number,
  category: String,
  variants: [variantSchema]
});

// üß© Create the Product model
const Product = mongoose.model("Product", productSchema);

// üöÄ Main function to demonstrate all operations
async function main() {
  try {
    // 1Ô∏è‚É£ Clear previous data
    await Product.deleteMany({});
    console.log("üßπ Old products cleared.\n");

    // 2Ô∏è‚É£ Insert sample products
    await Product.insertMany([
      {
        name: "T-Shirt",
        price: 19.99,
        category: "Apparel",
        variants: [
          { color: "Red", size: "M", stock: 50 },
          { color: "Blue", size: "L", stock: 30 },
          { color: "Black", size: "S", stock: 20 }
        ]
      },
      {
        name: "Sneakers",
        price: 79.99,
        category: "Footwear",
        variants: [
          { color: "White", size: "9", stock: 15 },
          { color: "Black", size: "10", stock: 10 }
        ]
      },
      {
        name: "Backpack",
        price: 49.99,
        category: "Accessories",
        variants: [
          { color: "Gray", size: "Standard", stock: 40 },
          { color: "Blue", size: "Standard", stock: 25 }
        ]
      }
    ]);

    console.log("‚úÖ Sample products inserted.\n");

    // 3Ô∏è‚É£ Retrieve all products
    console.log("üì¶ All Products:");
    console.log(await Product.find().lean(), "\n");

    // 4Ô∏è‚É£ Filter products by category
    console.log("üëü Products in 'Footwear' category:");
    console.log(await Product.find({ category: "Footwear" }).lean(), "\n");

    // 5Ô∏è‚É£ Project specific variant details
    console.log("üé® Product names and variant colors/stocks:");
    console.log(await Product.find({}, { name: 1, "variants.color": 1, "variants.stock": 1, _id: 0 }).lean(), "\n");

    // 6Ô∏è‚É£ Update stock for a specific variant (e.g., T-Shirt ‚Üí Blue)
    await Product.updateOne(
      { name: "T-Shirt", "variants.color": "Blue" },
      { $set: { "variants.$.stock": 25 } }
    );

    console.log("üîÅ Stock updated for T-Shirt (Blue variant).\n");

    // 7Ô∏è‚É£ Verify the update
    console.log("üßæ Updated T-Shirt document:");
    console.log(await Product.findOne({ name: "T-Shirt" }).lean());

  } catch (err) {
    console.error("‚ùå Error:", err);
  } finally {
    // 8Ô∏è‚É£ Close the connection
    mongoose.connection.close();
    console.log("\nüîí Connection closed.");
  }
}

// ‚ñ∂Ô∏è Run the script
main();

